/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Bundler, BundlerInterface } from "../../contracts/Bundler";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_swapRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_riftExchange",
        type: "address",
      },
      {
        internalType: "address",
        name: "_cbBTC",
        type: "address",
      },
      {
        internalType: "address",
        name: "_permit2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_universalRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ApprovalToRiftExchangeFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapExecutionFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "cbBTCReceived",
        type: "uint256",
      },
    ],
    name: "BundlerExecution",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "numTransfers",
        type: "uint256",
      },
    ],
    name: "PermitTransferExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "riftExchange",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
    ],
    name: "RiftDepositExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "initialCbBTCBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "finalCbBTCBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "cbBTCReceived",
        type: "uint256",
      },
    ],
    name: "SwapExecuted",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "depositOwnerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "bytes32",
            name: "depositSalt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "safeBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.DepositLiquidityParams",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "cbBTCReceived",
        type: "uint256",
      },
    ],
    name: "approveAndDepositTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cbBTC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "swapCalldata",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
    ],
    name: "executeSwap",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "initialCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cbBTCReceived",
            type: "uint256",
          },
        ],
        internalType: "struct Types.BundlerResult",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "swapCalldata",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "depositOwnerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "bytes32",
            name: "depositSalt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "safeBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.DepositLiquidityParams",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "executeSwapAndDeposit",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "initialCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cbBTCReceived",
            type: "uint256",
          },
        ],
        internalType: "struct Types.BundlerResult",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "swapCalldata",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "depositOwnerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "bytes32",
            name: "depositSalt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "safeBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.DepositLiquidityParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeSwapAndDepositTest",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "initialCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cbBTCReceived",
            type: "uint256",
          },
        ],
        internalType: "struct Types.BundlerResult",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "permit2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permitted",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "permitTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permitted",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "swapCalldata",
        type: "bytes",
      },
    ],
    name: "permitTransferAndSwapTest",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "riftExchange",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testFunction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "universalRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101203461013857601f61205f38819003918201601f19168301916001600160401b0383118484101761013d5780849260a0946040528339810103126101385761004881610153565b9061005560208201610153565b61006160408301610153565b9061007a608061007360608601610153565b9401610153565b9360805260a05260c05260e05261010052604051611ef790816101688239608051818181610570015281816107fc01528181610baf01528181610e5301528181611bf50152611d39015260a0518181816101a60152818161094301528181610f8f015261175c015260c0518181816102840152818161051101528181610b4701528181610df501528181611310015281816117c50152611ba2015260e05181818161013701528181610a1e015261199c015261010051816102150152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101385756fe6080604052600436101561001257600080fd5b60003560e01c806312261ee7146100d75780631c919e10146100d257806335a9e4df146100cd5780635ad182d3146100c85780636ca79b93146100c35780639a9bf481146100be578063a49e59f8146100b9578063c31c9c07146100b4578063cf61e1ec146100af578063e16b4a9b146100aa578063f1180511146100a55763f2462740146100a057600080fd5b610d15565b61096c565b610894565b610820565b6107b1565b610754565b61044e565b61036e565b610239565b6101ca565b61015b565b6100ec565b60009103126100e757565b600080fd5b346100e75760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e757602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100e75760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e757602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100e75760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e757602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100e75760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e757602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b9181601f840112156100e75782359167ffffffffffffffff83116100e757602083818601950101116100e757565b90816101809103126100e75790565b73ffffffffffffffffffffffffffffffffffffffff8116036100e757565b359061030e826102e5565b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c60809101126100e757608490565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc60809101126100e757604490565b6101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e75760043560243567ffffffffffffffff81116100e7576103bc9036906004016102a8565b919060443567ffffffffffffffff81116100e7576103de9036906004016102d6565b916064356103eb816102e5565b6103f436610310565b90610104359467ffffffffffffffff86116100e75761044a9661041e6104269736906004016102a8565b9690956112b5565b60408051825181526020808401519082015291810151908201529081906060820190565b0390f35b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e75760043567ffffffffffffffff81116100e7576104989036906004016102a8565b6024356104a4816102e5565b60443591606435936104b5856102e5565b6104bd6111ee565b506104ce6104c9611404565b611a95565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169590946020866024818a5afa9586156106f557600096610724575b509161055c600094928594611cfc565b61056b6040518093819361143f565b0390347f00000000000000000000000000000000000000000000000000000000000000005af161059961144d565b50156106fa576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015292602090849060249082905afa80156106f55761044a936000916106c6575b506105f583826114ab565b917f4d3257edb95914b701655f9bf4b58e4b422017a7b94dad03a20dae00f4b1cbb760405180610638868689846040919493926060820195825260208201520152565b0390a17f5798042aa6f4acc5fdf6fc5c6c8a1f092d35373907c7bf9ac07a40c40a29953073ffffffffffffffffffffffffffffffffffffffff6040519216918061068786829190602083019252565b0390a26106926111d0565b9283526020830152604082015260405191829182919091604080606083019480518452602081015160208501520151910152565b6106e8915060203d6020116106ee575b6106e0818361118a565b810190611259565b386105ea565b503d6106d6565b611268565b7f7055054e0000000000000000000000000000000000000000000000000000000060005260046000fd5b60009492859492975061074861055c9260203d6020116106ee576106e0818361118a565b9792945092945061054c565b346100e75760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e75760043567ffffffffffffffff81116100e7576107a66107af9136906004016102d6565b60243590611734565b005b346100e75760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e757602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100e75760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e75760043561085b816102e5565b6024356108673661033f565b9160c4359267ffffffffffffffff84116100e75761088c6107af9436906004016102a8565b93909261196f565b346100e75760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e7576020604061090481516108d6838261118a565b601481527f546573742066756e6374696f6e2063616c6c656400000000000000000000000084820152611a95565b8051606481527fa31e8bc1bdee2d6252cc2eaffcfd97de92d288a10a0c3699f5b066a6697a33b58373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001692a25160018152f35b6101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e7576004356109a3816102e5565b6024356109af3661033f565b60c43567ffffffffffffffff81116100e7576109cf9036906004016102a8565b60e49491943567ffffffffffffffff81116100e7576109f29036906004016102a8565b9290956109fe82611e0c565b610a0786611e64565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690610a476111df565b30815291876020840152803b156100e7578660008094610a98604051988996879586947f30f28b7a000000000000000000000000000000000000000000000000000000008652339160048701611900565b03925af19182156106f55773ffffffffffffffffffffffffffffffffffffffff92610cfa575b501693847fa3af27cbdd5938c0f2e793fee942c0b3ec8ea9384af488c16a446d87cd5d7bf660405180610af681906001602083019252565b0390a2610b046104c9611404565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016949093602085602481895afa9485156106f557600095610cc6575b5091610b9b60009492610b958695611a8b565b90611cfc565b610baa6040518093819361143f565b0390347f00000000000000000000000000000000000000000000000000000000000000005af1610bd861144d565b50156106fa576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291602090839060249082905afa9081156106f5577f4d3257edb95914b701655f9bf4b58e4b422017a7b94dad03a20dae00f4b1cbb7610ca2927f5798042aa6f4acc5fdf6fc5c6c8a1f092d35373907c7bf9ac07a40c40a29953094600091610ca7575b50610c7883826114ab565b60408051948552602085019290925290830181905291606090a16040519081529081906020820190565b0390a2005b610cc0915060203d6020116106ee576106e0818361118a565b38610c6d565b600094928594929650610b95610ced610b9b9360203d6020116106ee576106e0818361118a565b9793955050929450610b82565b80610d096000610d0f9361118a565b806100dc565b38610abe565b60a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e75760043567ffffffffffffffff81116100e757610d5f9036906004016102a8565b602435610d6b816102e5565b6044359160643590610d7c826102e5565b60843567ffffffffffffffff81116100e757610d9c9036906004016102d6565b94610da56111ee565b50610db16104c9611404565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529473ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169390602087602481885afa9687156106f55760009761112b575b5091610e3f600094928594611cfc565b610e4e6040518093819361143f565b0390347f00000000000000000000000000000000000000000000000000000000000000005af1610e7c61144d565b50156106fa576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290602082602481845afa9182156106f55760009261110a575b50610ed284836114ab565b927f4d3257edb95914b701655f9bf4b58e4b422017a7b94dad03a20dae00f4b1cbb760405180610f1587878a846040919493926060820195825260208201520152565b0390a17f5798042aa6f4acc5fdf6fc5c6c8a1f092d35373907c7bf9ac07a40c40a29953073ffffffffffffffffffffffffffffffffffffffff60405192169180610f6487829190602083019252565b0390a26040517f095ea7b30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff811660048301526024820185905291602090829060449082906000905af19081156106f5576000916110db575b50156110b15773ffffffffffffffffffffffffffffffffffffffff16803b156100e757604051947f48678e060000000000000000000000000000000000000000000000000000000086526000868061104b84600483016115d7565b038183865af19586156106f55760407fa31e8bc1bdee2d6252cc2eaffcfd97de92d288a10a0c3699f5b066a6697a33b5926106879261044a9961109c575b5060405191013581529081906020820190565b80610d0960006110ab9361118a565b38611089565b7f34f236ee0000000000000000000000000000000000000000000000000000000060005260046000fd5b6110fd915060203d602011611103575b6110f5818361118a565b8101906114b8565b38610ff0565b503d6110eb565b61112491925060203d6020116106ee576106e0818361118a565b9038610ec7565b60009492859492985061114f610e3f9260203d6020116106ee576106e0818361118a565b98929450929450610e2f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176111cb57604052565b61115b565b6040519061030e60608361118a565b6040519061030e60408361118a565b604051906060820182811067ffffffffffffffff8211176111cb5760405260006040838281528260208201520152565b6040519061122d60408361118a565b601a82527f457865637574696e67207377617020616e64206465706f7369740000000000006020830152565b908160209103126100e7575190565b6040513d6000823e3d90fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b919082018092116112b057565b611274565b946112db93959792949691976112c96111ee565b506112d56104c961121e565b8761196f565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152936020856024817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165afa9485156106f5576000956113dd575b509061136191611b5d565b916113768361137081876112a3565b93611734565b7f5798042aa6f4acc5fdf6fc5c6c8a1f092d35373907c7bf9ac07a40c40a29953073ffffffffffffffffffffffffffffffffffffffff604051921691806113c286829190602083019252565b0390a26113cd6111d0565b9283526020830152604082015290565b611361929195506113fc9060203d6020116106ee576106e0818361118a565b949091611356565b6040519061141360408361118a565b600e82527f457865637574696e6720737761700000000000000000000000000000000000006020830152565b908092918237016000815290565b3d156114a6573d9067ffffffffffffffff82116111cb576040519161149a601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0166020018461118a565b82523d6000602084013e565b606090565b919082039182116112b057565b908160209103126100e7575180151581036100e75790565b359067ffffffffffffffff821682036100e757565b35907fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000821682036100e757565b359060ff821682036100e757565b80358252602081013563ffffffff81168091036100e7576020830152604090810135910152565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112156100e757016020813591019167ffffffffffffffff82116100e7578160051b360383136100e757565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116100e75760209260051b809284830137010190565b90611731916020815261160a602082016115f084610303565b73ffffffffffffffffffffffffffffffffffffffff169052565b61163661161960208401610303565b73ffffffffffffffffffffffffffffffffffffffff166040830152565b6040820135606082015261166061164f606084016114d0565b67ffffffffffffffff166080830152565b61169861166f608084016114e5565b7fffffffffffffffffffffffffffffffffffffffffffff000000000000000000001660a0830152565b60a082013560c08201526116bb6116b160c08401611512565b60ff1660e0830152565b6116cc610100820160e08401611520565b6117006116f46116e0610140850185611547565b6101806101608601526101a085019161159a565b92610160810190611547565b916101807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08286030191015261159a565b90565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff81166004830152602482019390935290919060208180604481010381600073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19081156106f5576000916118a2575b50156110b15773ffffffffffffffffffffffffffffffffffffffff1690813b156100e7576040517f48678e060000000000000000000000000000000000000000000000000000000081526000818061185185600483016115d7565b038183875af180156106f5577fa31e8bc1bdee2d6252cc2eaffcfd97de92d288a10a0c3699f5b066a6697a33b59261189d9260409261109c575060405191013581529081906020820190565b0390a2565b6118bb915060203d602011611103576110f5818361118a565b386117f6565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b906117319593602061010094606073ffffffffffffffffffffffffffffffffffffffff94858135611930816102e5565b16875283810135848801526040810135604088015201356060860152838151166080860152015160a08401521660c08201528160e082015201916118c1565b9392909161197c85611e0c565b61198583611e64565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690604051936119cc60408661118a565b3085526020850152813b156100e75760008094611a1a604051978896879586947f30f28b7a000000000000000000000000000000000000000000000000000000008652339160048701611900565b03925af180156106f557611a76575b507fa3af27cbdd5938c0f2e793fee942c0b3ec8ea9384af488c16a446d87cd5d7bf673ffffffffffffffffffffffffffffffffffffffff6040519216918061189d81906001602083019252565b80610d096000611a859361118a565b38611a29565b35611731816102e5565b906040517f41304fac0000000000000000000000000000000000000000000000000000000060208201526020602482015282519283604483015260005b848110611b47575050611b426064827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8760008561030e999a860101520116810103017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261118a565b611ea6565b8060208092840101516064828601015201611ad2565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152929173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691602085602481865afa9485156106f557600095611cd3575b506000918291611bf06040518093819361143f565b0390347f00000000000000000000000000000000000000000000000000000000000000005af1611c1e61144d565b50156106fa576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290602090829060249082905afa80156106f5577f4d3257edb95914b701655f9bf4b58e4b422017a7b94dad03a20dae00f4b1cbb791600091611cb4575b50611c9884826114ab565b60408051958652602086019290925290840181905292606090a1565b611ccd915060203d6020116106ee576106e0818361118a565b38611c8d565b6000929083929650611cf39060203d6020116106ee576106e0818361118a565b95915091611bdb565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201929092529160209183916044918391600091165af19081156106f557600091611ded575b5015611d8f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f417070726f766520746f20726f75746572206661696c656400000000000000006044820152fd5b611e06915060203d602011611103576110f5818361118a565b38611d87565b61030e9073ffffffffffffffffffffffffffffffffffffffff604051917f2c2ecbc200000000000000000000000000000000000000000000000000000000602084015216602482015260248152611b4260448261118a565b61030e90604051907ff82c50f1000000000000000000000000000000000000000000000000000000006020830152602482015260248152611b4260448261118a565b600080916020815191016a636f6e736f6c652e6c6f675afa5056fea264697066735822122040c8ce807ed00b8965433fe2f377b1654fba59a144d196667dd841522c0b0bec64736f6c634300081c0033";

type BundlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BundlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bundler__factory extends ContractFactory {
  constructor(...args: BundlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _swapRouter: AddressLike,
    _riftExchange: AddressLike,
    _cbBTC: AddressLike,
    _permit2: AddressLike,
    _universalRouter: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _swapRouter,
      _riftExchange,
      _cbBTC,
      _permit2,
      _universalRouter,
      overrides || {}
    );
  }
  override deploy(
    _swapRouter: AddressLike,
    _riftExchange: AddressLike,
    _cbBTC: AddressLike,
    _permit2: AddressLike,
    _universalRouter: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _swapRouter,
      _riftExchange,
      _cbBTC,
      _permit2,
      _universalRouter,
      overrides || {}
    ) as Promise<
      Bundler & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Bundler__factory {
    return super.connect(runner) as Bundler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BundlerInterface {
    return new Interface(_abi) as BundlerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Bundler {
    return new Contract(address, _abi, runner) as unknown as Bundler;
  }
}
