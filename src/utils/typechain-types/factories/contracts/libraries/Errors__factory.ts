/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Errors,
  ErrorsInterface,
} from "../../../contracts/libraries/Errors";

const _abi = [
  {
    inputs: [],
    name: "ApprovalToRiftExchangeFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotOverwriteOngoingSwap",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainworkTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "CheckpointNotEstablished",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositAmountTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositStillLocked",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositVaultDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositVaultNotOverwritable",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyDepositVault",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidBlockInclusionProof",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidConfirmationBlockDelta",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidConfirmationBlockInclusionProof",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidLeavesCommitment",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidScriptPubKey",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSwapBlockInclusionProof",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSwapTotals",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidVaultCommitment",
    type: "error",
  },
  {
    inputs: [],
    name: "NewDepositsPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "NoFeeToPay",
    type: "error",
  },
  {
    inputs: [],
    name: "NoSwapsToSubmit",
    type: "error",
  },
  {
    inputs: [],
    name: "NoVaults",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughConfirmationBlocks",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughConfirmations",
    type: "error",
  },
  {
    inputs: [],
    name: "PayoutAddressMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "RootWasNotUpdated",
    type: "error",
  },
  {
    inputs: [],
    name: "SatOutputTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "StillInChallengePeriod",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapExecutionFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapNotProved",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212200e95833e4f99d360c7f04ffe084ddbedb4f85efcb34a64a680733e6133ad4ddb64736f6c634300081c0033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Errors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Errors__factory {
    return super.connect(runner) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Errors {
    return new Contract(address, _abi, runner) as unknown as Errors;
  }
}
